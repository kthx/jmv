<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!-- This is a checkstyle configuration file. For descriptions of
what the following rules do, please see the checkstyle configuration
page at http://checkstyle.sourceforge.net/config.html 




-->
 
<module name="Checker">
    <module name="TreeWalker">

        <module name="CyclomaticComplexity">
            <metadata name="com.jmv.identifier" value="cyclomaticcomplexitychecker" />
            <metadata name="com.jmv.helptext" value="
                Checks cyclomatic complexity against a specified limit. The complexity is measured by the number of if, while, do, for, ?:, catch, switch, case statements, and operators &amp;&amp; and || (plus one) in the body of a constructor, method, static initializer, or instance initializer. It is a measure of the minimum number of possible paths through the source and therefore the number of required tests. Generally 1-4 is considered good, 5-7 ok, 8-10 consider re-factoring, and 11+ re-factor now!
                " />
            <metadata name="com.jmv.title" value="CyclomaticComplexity check" />
            <property name="severity" value="warning" />
            <property name="max" value="4"/>
        </module>

        <module name="BooleanExpressionComplexity">
            <metadata name="com.jmv.identifier" value="booleanexpressioncomplexitychecker" />
            <metadata name="com.jmv.helptext" value="
                Restrict the number of number of &amp;&amp;, ||, &amp;, | and ^ in an expression.
                Rationale: Too many conditions leads to code that is difficult to read and hence debug and maintain.
                Note that the operators &amp; and | are not only integer bitwise operators, they are also the non-shortcut versions of the boolean operators &amp;&amp; and ||.
                " />
            <metadata name="com.jmv.title" value="BooleanExpressionComplexity check" />
            <property name="severity" value="warning" />
            <property name="max" value="4"/>
            <property name="tokens" value="LAND, BAND, LOR, BOR, BXOR"/>
        </module>


        <module name="ClassDataAbstractionCoupling">
            <metadata name="com.jmv.identifier" value="classdataabstractioncouplingchecker" />
            <metadata name="com.jmv.helptext" value="
                This metric measures the number of instantiations of other classes within the given class. This type of coupling is not caused by inheritance or the object oriented paradigm. Generally speaking, any abstract data type with other abstract data types as members has data abstraction coupling; therefore, if a class has a local variable that is an instantiation (object) of another class, there is data abstraction coupling. The higher the DAC, the more complex the data structure (classes) of the system.
                " />
            <metadata name="com.jmv.title" value="ClassDataAbstractionCoupling check" />
            <property name="severity" value="warning" />
            <property name="max" value="7"/>
            
        </module>

        <module name="ClassFanOutComplexity">
            <metadata name="com.jmv.identifier" value="classfanoutcomplexitychecker" />
            <metadata name="com.jmv.helptext" value="
                The number of other classes a given class relies on. Also the square of this has been shown to indicate the amount of maintenance required in functional programs (on a file basis) at least.
                " />
            <metadata name="com.jmv.title" value="ClassFanOutComplexity check" />
            <property name="severity" value="warning" />
            <property name="max" value="20"/>
        </module>

        <module name="NPathComplexity">
            <metadata name="com.jmv.identifier" value="npathcomplexitychecker" />
            <metadata name="com.jmv.helptext" value="
                The NPATH metric computes the number of possible execution paths through a function. It takes into account the nesting of conditional statements and multi-part boolean expressions (e.g., A &amp;&amp; B, C || D, etc.).
                Rationale: Nejmeh says that his group had an informal NPATH limit of 200 on individual routines; functions that exceeded this value were candidates for further decomposition - or at least a closer look.
                " />
            <metadata name="com.jmv.title" value="NPathComplexity check" />
            <property name="severity" value="warning" />
            <property name="max" value="200"/>
        </module>

        <module name="JavaNCSS">
            <metadata name="com.jmv.identifier" value="javancsschecker" />
            <metadata name="com.jmv.helptext" value="
                Determines complexity of methods, classes and files by counting the Non Commenting Source Statements (NCSS). This check adheres to the specification for the JavaNCSS-Tool written by Chr. Clemens Lee.
                Rougly said the NCSS metric is calculated by counting the source lines which are not comments, (nearly) equivalent to counting the semicolons and opening curly braces.
                The NCSS for a class is summarized from the NCSS of all its methods, the NCSS of its nested classes and the number of member variable declarations.
                The NCSS for a file is summarized from the ncss of all its top level classes, the number of imports and the package declaration.

                Rationale: Too large methods and classes are hard to read and costly to maintain. A large NCSS number often means that a method or class has too many responsibilities and/or functionalities which should be decomposed into smaller units.
                " />
            <metadata name="com.jmv.title" value="JavaNCSS check" />
            <property name="severity" value="warning" />
            <property name="methodMaximum" value="50"/>
            <property name="classMaximum" value="1500"/>
            <property name="fileMaximum" value="2000"/>
        </module>

    </module>


    <module name="RegexpSingleline">
        <metadata name="com.jmv.identifier" value="copyrightchecker" />
        <property name="format"
            value="^(//| \*) Copyright (\([cC]\) )?[\d]{4}(\-[\d]{4})? (Company name\.).*$" />
        <property name="minimum" value="1" />
        <property name="maximum" value="10" />
        <property name="message" value="Copyright is missing or malformed." />
        <property name="severity" value="warning" />
        <metadata name="com.jmv.title" value="Copyright check" />
        <metadata name="com.jmv.helptext" value="
  Requires a copyright notice in each file.
  Code intended to be open-sourced may have a multi-line copyright
  notice, so that this required text appears on the second line:
  &lt;pre&gt;
/*
* Copyright 20XX Company name.
*
* (details of open-source license...)
*/&lt;/pre&gt;" />
    </module>
    <module name="FileTabCharacter">
        <metadata name="com.jmv.identifier" value="tabchecker" />
        <metadata name="com.jmv.helptext" value="Checks that there are no tab characters in the file" />
        <metadata name="com.jmv.title" value="Tab check" />
        <property name="severity" value="warning" />
    </module>

    
</module>